// <auto-generated />
using Commercy.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Commercy.Infra.Data.Migrations
{
    [DbContext(typeof(CommercyContext))]
    partial class CommercyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommercyDomain.Entities.AccountShopping", b =>
                {
                    b.Property<int>("AccountShoppingId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActiveAccountShopping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CustomerIdAccountShopping");

                    b.Property<DateTime>("DtaAccountShopping");

                    b.HasKey("AccountShoppingId");

                    b.HasIndex("CustomerIdAccountShopping")
                        .IsUnique();

                    b.ToTable("AccountShopping");
                });

            modelBuilder.Entity("CommercyDomain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressCustomer")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("DtaBirth");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NumberPersonalDocument")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CommercyDomain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DtaContract");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("CommercyDomain.Entities.ShoppingExecuted", b =>
                {
                    b.Property<int>("ShoppingExecutedId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountShoppingExecutedId");

                    b.Property<DateTime>("DtaShopping");

                    b.Property<bool>("StatusShopping");

                    b.Property<decimal>("TotalShopping");

                    b.HasKey("ShoppingExecutedId");

                    b.HasIndex("AccountShoppingExecutedId");

                    b.ToTable("ShoppingExecuted");
                });

            modelBuilder.Entity("CommercyDomain.Entities.AccountShopping", b =>
                {
                    b.HasOne("CommercyDomain.Entities.Customer", "CustomerAccountShopping")
                        .WithOne("AccountShopping")
                        .HasForeignKey("CommercyDomain.Entities.AccountShopping", "CustomerIdAccountShopping")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommercyDomain.Entities.ShoppingExecuted", b =>
                {
                    b.HasOne("CommercyDomain.Entities.AccountShopping", "AccountShoppingExecuted")
                        .WithMany("LstShoppingExecuted")
                        .HasForeignKey("AccountShoppingExecutedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
